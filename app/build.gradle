apply plugin: 'com.android.application'
apply from: 'version.gradle'
apply from: 'compile.gradle'
apply from: '../config.gradle'
apply from: '../utils.gradle'

def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object
def keystoreProperties = new Properties()
// Load keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


android {
    signingConfigs {
        ZekeSigned {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdkVersion android.compileSdkVersion
    buildToolsVersion android.buildToolsVersion

    defaultConfig {
        applicationId 'com.kingz.customdemo'
        multiDexEnabled false
        versionCode android.versionCode
        versionName android.versionName
        signingConfig signingConfigs.ZekeSigned
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion android.targetSdkVersion
        buildConfigField("String", "APP_NAME", "\"Greek\"")

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

//        ndk{
//            abiFilters 'x86','x86_64','armeabi-v7a','armeabi','armea64-v8a'
//        }

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions"
                abiFilters 'armeabi-v7a','x86'

                version "3.6"
                //  .externalNativeBuild/cmake/debug/{abi}/cmake_build_command.txt
            }
        }
    }

    buildTypes {
        debug {
            buildConfigField("boolean", "SPLSH_DEBUG", "false")
            zipAlignEnabled true
        }

        release {
            buildConfigField("boolean", "SPLSH_DEBUG", "true")
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.ZekeSigned
        }
    }

    // Use this block to link Gradle to your CMake or ndk-build script.
    externalNativeBuild {
        cmake {
            // Provides a relative path to your CMake build script.
            path "CMakeLists.txt"
        }
    }

    // Specifies flavor dimensions.
    flavorDimensions "area"

    productFlavors{
        ChengDu{
            dimension "area"
            applicationId 'com.demo.chengdu'
        }
    }

    configurations {
    }

    compileOptions {
        encoding compile_encoding
        sourceCompatibility compile_source_compatibility
        targetCompatibility compile_target_compatibility
    }

    adbOptions{
    }

    packagingOptions {
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
    }

    repositories{
        flatDir{
            dirs 'libs'
        }
    }

    applicationVariants.all { variant ->
        def prefix = 'Greek'
        def versionName = 'V' + variant.getVersionName()
        def versionCode = 'VC' + variant.getVersionCode()

        variant.outputs.all { output ->
            if(output.outputFile != null && output.outputFile.name.endsWith('.apk')){
                def oName = output.outputFile.name
                logger.log(LogLevel.DEBUG, "output Name=" +  oName)
                outputFileName = "${prefix}_${versionName}_${versionCode}" +
                        "_${variant.flavorName}_${variant.buildType.name}_${releaseTime()}.apk"
            }
        }
    }
}

dependencies {
    implementation project(':library-player')
    implementation project(':library-views')
    implementation fileTree(include: ['*.jar','*.aar'], dir: 'libs')
    implementation 'com.getbase:floatingactionbutton:1.10.1'


    implementation "com.github.bumptech.glide:glide:${lib_versions.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${lib_versions.glide_c}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${lib_versions.glide_okhttp}"

    //RxJava
    implementation "io.reactivex.rxjava2:rxjava:${lib_versions.rxJava}"
    //RxAndroid
    implementation "io.reactivex.rxjava2:rxandroid:${lib_versions.rxandroid}"
    implementation "com.squareup.retrofit2:retrofit:${lib_versions.rtf2}"
    implementation "com.squareup.retrofit2:converter-gson:${lib_versions.rtf2_2gson}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${lib_versions.rtf2_adapter}"

    //OkHttp3 & okio
    implementation "com.squareup.okhttp3:okhttp:${lib_versions.okhttp}"
    implementation "com.squareup.okio:okio:${lib_versions.okio}"

    implementation "com.android.support.constraint:constraint-layout:${lib_versions.cons_layout}"
    implementation "com.android.support:design:${supports.version}"
    implementation "com.android.support:support-v4:${supports.version}"
    implementation "com.android.support:recyclerview-v7:${supports.version}"
    implementation "com.android.support:appcompat-v7:${supports.version}"

    // Tutterknife library
    implementation "com.jakewharton:butterknife:${lib_versions.bkf}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${lib_versions.bkf}"

    // Test library
    testImplementation 'junit:junit:4.12'
    androidTestImplementation "com.android.support.test:runner:${lib_versions.tr}"
    androidTestImplementation "com.android.support.test:rules:${lib_versions.tr}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${lib_versions.es_core}"
    androidTestImplementation "com.android.support:support-annotations:${lib_versions.support}"

    // WorkManager (Java only)
    implementation "android.arch.work:work-runtime:$lib_versions.work_version"


    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lib_versions.lifecycle"
//  just ViewModel
//  implementation "android.arch.lifecycle:viewmodel:1.1.0"
//  just LiveData
//  implementation "android.arch.lifecycle:livedata:1.1.0"


//    implementation 'com.github.zeke:kangaroo:1.0.1@aar'
}

//
//android.applicationVariants.all{variant ->
//    println('pppppp:' + variant.flavorName)
//}

//gradle.taskGraph.whenReady {
//    graph ->  println('>>>>>> taskGraph is ready! Config finished.')
//}
//
//gradle.buildFinished {
//    result -> println('>>>>>> all buildFinished!.')
//}
//
///**
// * 表示所有的模块都已经配置完
// * 可以准备执行task
// */
project.afterEvaluate {
    logger.log(LogLevel.ERROR,'>>>>> Evaluate End')
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().toString())
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().getDependencies().toString())
    /** 遍历构建遍历 可以根据构建类型进行任务处理 */
    android.libraryVariants.each{ variant ->

    }
}
//
//logger.log(LogLevel.DEBUG, ">>>>>>>>>>> app config End")


