apply plugin: 'com.android.application'
apply from: 'version.gradle'
apply from: 'compile.gradle'
apply from: '../config.gradle'

def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object
def keystoreProperties = new Properties()
// Load keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        ZekeSigned {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion android.compileSdkVersion
    buildToolsVersion android.buildToolsVersion

    defaultConfig {
        applicationId 'com.kingz.customdemo'
        multiDexEnabled false
        versionCode android.versionCode
        versionName android.versionName
        signingConfig signingConfigs.ZekeSigned
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion 24
        buildConfigField("String", "APP_NAME", "\"STARCOR\"")

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            buildConfigField("boolean", "SPLSH_DEBUG", "false")
            zipAlignEnabled true
        }
        release {
            buildConfigField("boolean", "SPLSH_DEBUG", "true")
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.ZekeSigned
        }
    }

    // Specifies flavor dimensions.
    flavorDimensions "area","devices"

    productFlavors{
        ChengDu{
            dimension "area"
            applicationId 'com.demo.chengdu'
        }

        SanYa{
            dimension "area"
            applicationId 'com.demo.chongqing'
        }

        CH{
            dimension "devices"
        }

        TCL{
            dimension "devices"
        }
    }

    configurations {
    }

    compileOptions {
        encoding compile_encoding
        sourceCompatibility compile_source_compatibility
        targetCompatibility compile_target_compatibility
    }

    adbOptions{
    }

    packagingOptions {
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
    }
}

dependencies {
    implementation project(path: ':views-library')
    implementation project(path: ':player-library')
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //FAB
    implementation 'com.getbase:floatingactionbutton:1.10.1'

    // --------------- 网络框架 ---- START --------------
    //RxJava
    implementation "io.reactivex.rxjava2:rxjava:${lib_versions.rxJava}"
    //RxAndroid
    implementation "io.reactivex.rxjava2:rxandroid:${lib_versions.rxandroid}"

    implementation "com.squareup.retrofit2:retrofit:${lib_versions.rtf2}"
    implementation "com.squareup.retrofit2:converter-gson:${lib_versions.rtf2_2gson}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${lib_versions.rtf2_adapter}"

    //OkHttp3 & okio
    implementation "com.squareup.okhttp3:okhttp:${lib_versions.okhttp}"
    implementation "com.squareup.okio:okio:${lib_versions.okio}"
    // --------------- 网络框架 ---- END --------------

    implementation "com.android.support.constraint:constraint-layout:${lib_versions.cons_layout}"
    implementation "com.android.support:design:${supports.version}"
    implementation "com.android.support:support-v4:${supports.version}"
    implementation "com.android.support:recyclerview-v7:${supports.version}"
    implementation "com.android.support:appcompat-v7:${supports.version}"


    // Tutterknife library
    implementation "com.jakewharton:butterknife:${lib_versions.bkf}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${lib_versions.bkf}"

    // Test library
    testImplementation 'junit:junit:4.12'
    androidTestImplementation "com.android.support.test:runner:${lib_versions.tr}"
    androidTestImplementation "com.android.support.test:rules:${lib_versions.tr}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${lib_versions.es_core}"
    androidTestImplementation "com.android.support:support-annotations:${lib_versions.support}"
}

//
//android.applicationVariants.all{variant ->
//    println('pppppp:' + variant.flavorName)
//}

//gradle.taskGraph.whenReady {
//    graph ->  println('>>>>>> taskGraph is ready! Config finished.')
//}
//
//gradle.buildFinished {
//    result -> println('>>>>>> all buildFinished!.')
//}
//
///**
// * 表示所有的模块都已经配置完
// * 可以准备执行task
// */
//project.afterEvaluate {
//    logger.log(LogLevel.ERROR,'>>>>> Evaluate End')
//    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().toString())
//    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().getDependencies().toString())
//    /** 遍历构建遍历 可以根据构建类型进行任务处理 */
////    android.libraryVariants.each{ variant ->
////
////    }
//}
//
//logger.log(LogLevel.DEBUG, ">>>>>>>>>>> app config End")


