apply {
    plugin 'com.android.application'
    plugin 'kotlin-android'
    plugin 'kotlin-android-extensions'

    from 'version.gradle'
    from 'compile.gradle'
    from '../config.gradle'
    from '../utils.gradle'
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object
def keystoreProperties = new Properties()
// Load keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        ZekeSigned {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdkVersion android.compileSdkVersion
    buildToolsVersion android.buildToolsVersion

    defaultConfig {
        applicationId 'com.kingz.customdemo'
        multiDexEnabled true
        versionCode android.versionCode
        versionName android.versionName
        signingConfig signingConfigs.ZekeSigned
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion android.targetSdkVersion
        buildConfigField("String", "APP_NAME", "\"Greek\"")

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

//        ndk{
//            abiFilters 'x86','x86_64','armeabi-v7a','armeabi','armea64-v8a'
//        }

//        externalNativeBuild {
//            cmake {
//                cppFlags "-std=c++11 -frtti -fexceptions"
//                abiFilters 'armeabi-v7a','x86'
//
//                version "3.6"
//                //  .externalNativeBuild/cmake/debug/{abi}/cmake_build_command.txt
//            }
//        }
    }

    buildTypes {
        debug {
            buildConfigField("boolean", "SPLSH_DEBUG", "false")
            zipAlignEnabled true
        }

        release {
            zipAlignEnabled true
            buildConfigField("boolean", "SPLSH_DEBUG", "true")
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.ZekeSigned
        }
    }

    // Use this block to link Gradle to your CMake or ndk-build script.
//    externalNativeBuild {
//        cmake {
//            // Provides a relative path to your CMake build script.
//            path "CMakeLists.txt"
//        }
//    }

    // Specifies flavor dimensions.
    flavorDimensions "area"

    productFlavors{
        // 开发测试阶段
        ChengDu{
            //运行在Android 5.0以上版本的设备中，
            //使用ART-supported格式生成multidex的速度要快很多
//            minSdkVersion 21
            dimension "area"
            applicationId 'com.demo.chengdu'
        }
    }

    configurations {
    }

    compileOptions {
        encoding compile_encoding
        sourceCompatibility compile_source_compatibility
        targetCompatibility compile_target_compatibility
    }

    adbOptions{
    }

//    packagingOptions {
//        doNotStrip '*/mips/*.so'
//        doNotStrip '*/mips64/*.so'
//    }

    repositories{
        flatDir{
            dirs 'libs'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    applicationVariants.all { variant ->
        def flavorName = variant.flavorName
        //判断是release还是debug版本
        def buildType = variant.buildType.name

        def versionName = 'V' + variant.getVersionName()
        def versionCode = 'VC' + variant.getVersionCode()
        variant.outputs.all  { item ->
            // 使用 item.outputFile 会导致以下警告：
            //  API 'variantOutput.getPackageApplication()' is obsolete and has been replaced with
            // 'variant.getPackageApplicationProvider()'.

            // def optFile = item.outputFile
            // if(optFile != null && optFile.name.endsWith('.apk')){
            //     // 对后缀为.apk的文件做命名修改处理
            //     logger.log(LogLevel.DEBUG, "output Name: ${optFile.name}")
            //     def fileName = "Greek_${versionName}_${versionCode}_${flavorName}_${buildType}_${releaseTime()}.apk"
            //     item.outputFileName = fileName
            // }
            def fileName = "Greek_${versionName}_${versionCode}_${flavorName}_${buildType}_${releaseTime()}.apk"
            outputFileName = fileName
        }
    }
}

dependencies {
    implementation project(':library-player')
    implementation project(':library-views')
    implementation fileTree(include: ['*.jar','*.aar'], dir: 'libs')
//    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.zhy:autolayout:1.4.5'

    // Glide
    implementation "com.github.bumptech.glide:glide:${lib_versions.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${lib_versions.glide_c}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${lib_versions.glide_okhttp}"

    implementation rootProject.ext.dependencies["kotlin"]
    implementation rootProject.ext.dependencies["kotlin-reflect"]
    implementation rootProject.ext.dependencies["coroutines-core"]
    implementation rootProject.ext.dependencies["coroutines-android"]


    // Tools Lib
    implementation "com.google.code.gson:gson:$lib_versions.gson"

    //RxJava2(RxAndroid) + retrofit2 + okhttp3
    implementation "io.reactivex.rxjava2:rxjava:${lib_versions.rxJava}"
    implementation "io.reactivex.rxjava2:rxandroid:${lib_versions.rxandroid}"
    implementation "com.squareup.retrofit2:retrofit:${lib_versions.rtf2}"
    implementation "com.squareup.retrofit2:converter-gson:${lib_versions.rtf2_2gson}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${lib_versions.rtf2_adapter}"
    //OkHttp3 & okio
    implementation "com.squareup.okhttp3:okhttp:${lib_versions.okhttp}"
    implementation "com.squareup.okio:okio:${lib_versions.okio}"

    implementation "com.android.support.constraint:constraint-layout:${lib_versions.cons_layout}"
    implementation "com.android.support:design:${supports.version}"
    implementation "com.android.support:support-v4:${supports.version}"
    implementation "com.android.support:recyclerview-v7:${supports.version}"
    implementation "com.android.support:appcompat-v7:${supports.version}"
    implementation "com.android.support:cardview-v7:${supports.version}"

    // butterknife library
    implementation "com.jakewharton:butterknife:${lib_versions.bkf}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${lib_versions.bkf}"

    // Test library
    testImplementation 'junit:junit:4.12'
    androidTestImplementation "com.android.support.test:runner:${lib_versions.tr}"
    androidTestImplementation "com.android.support.test:rules:${lib_versions.tr}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${lib_versions.es_core}"
    androidTestImplementation "com.android.support:support-annotations:${lib_versions.support}"

    // WorkManager (Java only)
    implementation "android.arch.work:work-runtime:$lib_versions.work_version"


    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lib_versions.lifecycle"

    implementation rootProject.ext.dependencies["kangaroo"]
    implementation rootProject.ext.dependencies["xul_cache"]
}

//
//android.applicationVariants.all{variant ->
//    println('pppppp:' + variant.flavorName)
//}

//gradle.taskGraph.whenReady {
//    graph ->  println('>>>>>> taskGraph is ready! Config finished.')
//}
//
//gradle.buildFinished {
//    result -> println('>>>>>> all buildFinished!.')
//}
//
///**
// * 表示所有的模块都已经配置完
// * 可以准备执行task
// */
project.afterEvaluate {
    logger.log(LogLevel.ERROR,'>>>>> Evaluate End')
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().toString())
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().getDependencies().toString())
    /** 遍历构建遍历 可以根据构建类型进行任务处理 */
    android.libraryVariants.each{ variant ->

    }
}
//
//logger.log(LogLevel.DEBUG, ">>>>>>>>>>> app config End")


