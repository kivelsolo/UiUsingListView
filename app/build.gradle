//def currentPrj = getProject()
def prjPath = project.path
println("   $prjPath config Begin")
//Sets the custom build directory of this project
//currentPrj.buildDir("custom-build")

apply {
    plugin 'com.android.application'
    plugin 'kotlin-android'
    plugin 'kotlin-android-extensions'
    plugin 'kotlin-kapt'

    from '../buildsystem/config.gradle'
    from '../buildsystem/utils.gradle'
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object
def _keystoreProperties = new Properties()
// Load keystore.properties file into the keystoreProperties object.
_keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def _rootAndroid = rootProject.ext.android
def _rootDependencies = rootProject.ext.dependencies
def _rootTest = rootProject.ext.test

android {
    signingConfigs {
        ZekeSigned {
            keyAlias _keystoreProperties['keyAlias']
            keyPassword _keystoreProperties['keyPassword']
            storeFile file(_keystoreProperties['storeFile'])
            storePassword _keystoreProperties['storePassword']
        }
    }

    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId 'com.kingz.customdemo'
        multiDexEnabled true
        versionCode _rootAndroid.versionCode
        versionName _rootAndroid.versionName
        signingConfig signingConfigs.ZekeSigned
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        buildConfigField("String", "APP_NAME", "\"Greek\"")

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        ndk{
            // apk打包时包含的ABI的so文件
            // Supported ABIs are [arm64-v8a, armeabi-v7a, x86, x86_64]
            abiFilters 'arm64-v8a','x86','armeabi-v7a'
        }

        // Arouter的Kotlin配置
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }
    // ---------------- 构建类型配置[debug/release/beta] Start-------------- Specifies flavor dimensions.
    buildTypes {
        debug {
            zipAlignEnabled true
            /**
             * multiDexKeepFile 中指定的文件应该每行包含一个类，并且类采用 com/example/MyClass.class 格式
             * Gradle 会读取相对于 build.gradle 文件的路径，
             * 因此如果 multidex-config.txt 与 build.gradle 文件在同一目录中，则以下写法有效。
             */
            // multiDexKeepFile file('multidex-config.txt')
            /**
             * multiDexKeepProguard 文件使用与 Proguard 相同的格式，并且支持全部 Proguard 语法。
             */
            multiDexKeepProguard file('multidex-config.pro')
        }

        release {
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            multiDexKeepProguard file('multidex-config.pro')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.ZekeSigned
        }
    }
    // ---------------- 构建类型配置[debug/release/beta] Start-------------- Specifies flavor dimensions.

    // ---------------- 构建产物配置 Start-------------- Specifies flavor dimensions.
    flavorDimensions "area"

    productFlavors{
        // 开发测试阶段
        ChengDu{
            //运行在Android 5.0以上版本的设备中， 使用ART-supported格式生成multidex的速度要快很多
            minSdkVersion 21
            versionCode 42
            versionName "1.5.15"
            dimension "area"
            applicationId 'com.demo.chengdu'

            manifestPlaceholders = [
                    BUGLY_APP_ID: "@string/app_bugly_appid"
            ]
        }

        Beijing{
            minSdkVersion _rootAndroid.minSdkVersion

            manifestPlaceholders = [
                    BUGLY_APP_ID: "@string/app_bugly_appid"
            ]
        }
    }
    // ---------------- 构建产物配置 End -------------- Specifies flavor dimensions.

    configurations {}

    compileOptions {
        encoding rootProject.ext.java.compile_encoding
        sourceCompatibility rootProject.ext.java.sourceCompatibility
        targetCompatibility rootProject.ext.java.targetCompatibility
    }

    adbOptions{}

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    packagingOptions {
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
        doNotStrip '*/x86/*.so'
        doNotStrip '*/x86_64/*.so'
    }

    repositories{
        flatDir{
            dirs 'libs'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    //  启用View Binding
    viewBinding {
        enabled = true
    }

    /**
     * 构建变体产物配置
     */
    applicationVariants.all { variant ->
        //产品类型
        def flavorName = variant.flavorName
        //构建类型
        def buildType = variant.buildType.name
        def vName = variant.versionName
        def vCode = variant.versionCode
        // >=AGP 3.3
        variant.outputs.all  { item ->
            // 使用 item.outputFile 会导致以下警告：
            //  API 'variantOutput.getPackageApplication()' is obsolete and has been replaced with
            // 'variant.getPackageApplicationProvider()'.
            outputFileName = "Greek_${flavorName}_v${vName}_${vCode}_${buildType}_${releaseTime()}.apk"
        }
//<AGP 3.3
//        variant.outputs.all { item ->
//            def optFile = item.outputFile
//            if(optFile != null && optFile.name.endsWith('.apk')){
//                //对后缀为.apk的文件做命名修改处理
//                item.outputFileName = "Greek_${versionName}_${versionCode}_${flavorName}_${buildType}_${releaseTime()}.apk"
//            }
//        }
    }
}


kapt {
    arguments {
        arg("moduleName", project.getName())
    }
}

dependencies {
    println("   The closure to use to configure the dependencies is begin run.")

    //  ----------------------- 核心组件 START
        // ViewModel and LiveData
    implementation _rootDependencies["lifecycle-extensions"]
    implementation _rootDependencies["appcompat"]
    implementation _rootDependencies["kotlin"]
    implementation _rootDependencies["kotlin-reflect"]
    implementation _rootDependencies["coroutines-core"]
    implementation _rootDependencies["coroutines-android"]

    implementation _rootDependencies["gilde"]
    implementation _rootDependencies["gilde_annotations"]
    implementation _rootDependencies["glide_okhttp3"]
    kapt           _rootDependencies["glide_compiler"]

    implementation _rootDependencies["arouter"]
    kapt           _rootDependencies["arouter_compiler"]

    implementation "com.android.support:support-annotations:28.0.0"
    kapt "com.android.support:support-annotations:28.0.0"
        // WorkManager (Java only)
    implementation 'androidx.work:work-runtime:2.4.0'

    //  ----------------------- 核心组件 END


    //  ----------------------- 必备UI组件
    implementation _rootDependencies["recyclerView"]
    implementation _rootDependencies["cardView"]

    //  ----------------------- 必备第三方库
    implementation fileTree(include: ['*.jar','*.aar'], dir: 'libs')
    implementation _rootDependencies["gson"]
//    implementation _rootDependencies["xxPermissions"] // 动态权限申请库
    //implementation _rootDependencies["kangaroo"]
    implementation _rootDependencies["xul_cache"]

    // Test library
    testImplementation        _rootTest["junit"]
    androidTestImplementation _rootTest["test-core"]
    androidTestImplementation _rootTest["test-runner"]
    androidTestImplementation _rootTest["test-rules"]
    androidTestImplementation _rootTest["test-ext-junit"]
    androidTestImplementation _rootTest["support-test-espresso"]

    // ----------------------- 业务组件Module
    implementation createProject(':module-Common')
    if (isHomeModule.toBoolean()) {
        implementation createProject(':module-Home')
    }
    if (isLoginModule.toBoolean()) {
        implementation createProject(':module-Login')
    }
    implementation createProject(":module-Demo")
    implementation createProject(":module-Web")
    implementation createProject(":module-Player")
    implementation createProject(":module-Music")
    implementation project(':library-unittest')

    // -------->>>>>>>>>> 业务组件Module

    //RxJava2(RxAndroid) + retrofit2 + okhttp3
//    implementation "io.reactivex.rxjava2:rxjava:${lib_versions.rxJava}"
//    implementation "io.reactivex.rxjava2:rxandroid:${lib_versions.rxandroid}"
//    implementation "com.squareup.retrofit2:retrofit:${lib_versions.rtf2}"
//    implementation "com.squareup.retrofit2:converter-gson:${lib_versions.rtf2_2gson}"
//    implementation "com.squareup.retrofit2:adapter-rxjava2:${lib_versions.rtf2_adapter}"
}

/**
 * 创建指定名称的module所在的Project对象
 * 并输入日志打印
 * @param moduleName
 * @return Gradle project.
 */
Project createProject(String moduleName){
    _logPrintDependencieModel(moduleName)
    return project(moduleName)
}

def _logPrintDependencieModel(module_name){
    logger.log(LogLevel.ERROR,"     +--- add ${module_name} to app.")
}

//
//android.applicationVariants.all{variant ->
//    println('pppppp:' + variant.flavorName)
//}

//gradle.taskGraph.whenReady {
//    graph ->  println('>>>>>> taskGraph is ready! Config finished.')
//}
//
//gradle.buildFinished {
//    result -> println('>>>>>> all buildFinished!.')
//}

///**
// * 表示所有的模块都已经配置完
// * 可以准备执行task
// */
project.afterEvaluate {
    logger.log(LogLevel.ERROR,"------[${project.path}] is end Evaluate.")
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().toString())
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().getDependencies().toString())
    /** 遍历构建遍历 可以根据构建类型进行任务处理 */
    android.libraryVariants.each{ variant ->

    }
}
//
//logger.log(LogLevel.DEBUG, ">>>>>>>>>>> app config End")


println("   $prjPath config End")
