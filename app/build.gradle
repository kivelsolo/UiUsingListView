apply {
    plugin 'com.android.application'
    from 'version.gradle'
    from 'compile.gradle'
    from "../config.gradle"
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object
def keystoreProperties = new Properties()
// Load keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        ZekeSigned {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion android.compileSdkVersion
    buildToolsVersion android.buildToolsVersion

    //The default configuration, inherited by all product flavors(if any are defined)
    defaultConfig {
        applicationId 'com.kingz.customdemo'
        multiDexEnabled false
        versionCode android.versionCode
        versionName android.versionName
        //unit test
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        signingConfig signingConfigs.ZekeSigned
        minSdkVersion 19
        targetSdkVersion 24
        buildConfigField("String", "APP_NAME", "\"STARCOR\"")
    }

    // Specifies one flavor dimension.
    flavorDimensions "version"
//    productFlavors{
//        demo {
//            // Assigns this product flavor to the "version" flavor dimension.
//            // This property is optional if you are using only one dimension.
//            dimension "version"
//            applicationIdSuffix ".demo"
//            versionNameSuffix "-2019"
//            versionCode appVersionCode
//            versionName appVersionName
//            buildConfigField("String", "APP_NAME", "\"STARCOR\"")
//            buildConfigField 'String','MAIN_URL','"http://www.starcor.com"'
//        }
//    }

    buildTypes {
        debug {
//            buildConfigField("String", "n1_a_1", "\"www.baidu.com2\"")
            buildConfigField("boolean", "SPLSH_DEBUG", "false")
            zipAlignEnabled true
        }
        release {
            buildConfigField("boolean", "SPLSH_DEBUG", "true")
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.ZekeSigned
        }
    }

    configurations {
    }

    compileOptions {
        encoding compile_encoding
        sourceCompatibility compile_source_compatibility
        targetCompatibility compile_target_compatibility
    }

    adbOptions{
    }

    packagingOptions {
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
    }
}

configurations.all {
    resolutionStrategy.force 'com.android.support:support-annotations:27.1.1'
}

dependencies {
    implementation project(path: ':views-library')
    implementation project(path: ':player-library')
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //FAB
    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'com.android.support:design:27.1.1'

    // --------------- 网络框架 ---- START --------------
    //RxJava
    implementation "io.reactivex.rxjava2:rxjava:2.2.2"
    //RxAndroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
    //retrofit依赖Gson
    compile 'com.squareup.retrofit2:converter-gson:2.0.0'
    //retrofit依赖RxJava2
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'
    //OkHttp3 & okio
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation 'com.squareup.okio:okio:2.1.0'
    // --------------- 网络框架 ---- END --------------

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'

    //for local tests
    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'com.android.support:support-annotations:25.3.1'
}

gradle.taskGraph.whenReady {
    graph ->  println('>>>>>> taskGraph is ready! Config finished.')
}

gradle.buildFinished {
    result -> println('>>>>>> all buildFinished!.')
}

/**
 * 表示所有的模块都已经配置完
 * 可以准备执行task
 */
project.afterEvaluate {
    logger.log(LogLevel.ERROR,'>>>>> Evaluate End')
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().toString())
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().getDependencies().toString())
    /** 遍历构建遍历 可以根据构建类型进行任务处理 */
//    android.libraryVariants.each{ variant ->
//
//    }
}

logger.log(LogLevel.DEBUG, ">>>>>>>>>>> app config End")


