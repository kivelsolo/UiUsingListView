apply {
    plugin 'com.android.application'
    plugin 'kotlin-android'
    plugin 'kotlin-android-extensions'
    plugin 'kotlin-kapt'

    from '../config.gradle'
    from '../utils.gradle'

}

def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object
def keystoreProperties = new Properties()
// Load keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def root_android = rootProject.ext.android
def root_dependencies = rootProject.ext.dependencies

android {
    signingConfigs {
        ZekeSigned {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdkVersion android.compileSdkVersion
    buildToolsVersion android.buildToolsVersion

    defaultConfig {
        applicationId 'com.kingz.customdemo'
        multiDexEnabled true
        versionCode root_android.versionCode
        versionName root_android.versionName
        signingConfig signingConfigs.ZekeSigned
        minSdkVersion root_android.minSdkVersion
        targetSdkVersion root_android.targetSdkVersion
        buildConfigField("String", "APP_NAME", "\"Greek\"")

//        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

//        ndk{
//            abiFilters 'x86','x86_64','armeabi-v7a','armeabi','armea64-v8a'
//        }

//        externalNativeBuild {
//            cmake {
//                cppFlags "-std=c++11 -frtti -fexceptions"
//                abiFilters 'armeabi-v7a','x86'
//
//                version "3.6"
//                //  .externalNativeBuild/cmake/debug/{abi}/cmake_build_command.txt
//            }
//        }
    }

    buildTypes {
        debug {
            zipAlignEnabled true

            /**
             * multiDexKeepFile 中指定的文件应该每行包含一个类，并且类采用 com/example/MyClass.class 格式
             * Gradle 会读取相对于 build.gradle 文件的路径，
             * 因此如果 multidex-config.txt 与 build.gradle 文件在同一目录中，则以下写法有效。
             */
            // multiDexKeepFile file('multidex-config.txt')
            /**
             * multiDexKeepProguard 文件使用与 Proguard 相同的格式，并且支持全部 Proguard 语法。
             */
            multiDexKeepProguard file('multidex-config.pro')
        }

        release {
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            multiDexKeepProguard file('multidex-config.pro')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.ZekeSigned
        }
    }

    // Use this block to link Gradle to your CMake or ndk-build script.
//    externalNativeBuild {
//        cmake {
//            // Provides a relative path to your CMake build script.
//            path "CMakeLists.txt"
//        }
//    }

    // Specifies flavor dimensions.
    flavorDimensions "area"

    productFlavors{
        // 开发测试阶段
        ChengDu{
            //运行在Android 5.0以上版本的设备中， 使用ART-supported格式生成multidex的速度要快很多
            minSdkVersion 21
            dimension "area"
            applicationId 'com.demo.chengdu'
        }

        Beijing{
            minSdkVersion android.minSdkVersion
        }
    }

    configurations {
    }

    compileOptions {
        encoding rootProject.ext.java.compile_encoding
        sourceCompatibility rootProject.ext.java.sourceCompatibility
        targetCompatibility rootProject.ext.java.targetCompatibility
    }

    adbOptions{
    }

//    packagingOptions {
//        doNotStrip '*/mips/*.so'
//        doNotStrip '*/mips64/*.so'
//    }

    repositories{
        flatDir{
            dirs 'libs'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    applicationVariants.all { variant ->
        def flavorName = variant.flavorName
        //判断是release还是debug版本
        def buildType = variant.buildType.name

        def versionName = 'V' + variant.getVersionName()
        def versionCode = 'VC' + variant.getVersionCode()
        variant.outputs.all  { item ->
            // 使用 item.outputFile 会导致以下警告：
            //  API 'variantOutput.getPackageApplication()' is obsolete and has been replaced with
            // 'variant.getPackageApplicationProvider()'.

            // def optFile = item.outputFile
            // if(optFile != null && optFile.name.endsWith('.apk')){
            //     // 对后缀为.apk的文件做命名修改处理
            //     logger.log(LogLevel.DEBUG, "output Name: ${optFile.name}")
            //     def fileName = "Greek_${versionName}_${versionCode}_${flavorName}_${buildType}_${releaseTime()}.apk"
            //     item.outputFileName = fileName
            // }
            def fileName = "Greek_${versionName}_${versionCode}_${flavorName}_${buildType}_${releaseTime()}.apk"
            outputFileName = fileName
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar','*.aar'], dir: 'libs')
    kapt root_dependencies["arouter_compiler"]
    implementation project(':module-Common')
    if (isHomeModule.toBoolean()) { implementation project(':module-Home') }
    if (isLoginModule.toBoolean()) { implementation project(':module-login') }
    implementation project(":module-Demo")

    implementation project(':library-player')

//    implementation 'com.getbase:floatingactionbutton:1.10.1'

    // Glide
    implementation "com.github.bumptech.glide:glide:${lib_versions.glide}"
    implementation "com.github.bumptech.glide:annotations:${lib_versions.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${lib_versions.glide_c}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${lib_versions.glide_okhttp}"
    // 兼容AndroidX
    implementation "com.android.support:support-annotations:28.0.0"
    annotationProcessor "com.android.support:support-annotations:28.0.0"

    implementation rootProject.ext.dependencies["kotlin"]
    implementation rootProject.ext.dependencies["kotlin-reflect"]
    implementation rootProject.ext.dependencies["coroutines-core"]
    implementation rootProject.ext.dependencies["coroutines-android"]

    // Tools Lib
    implementation rootProject.ext.dependencies["gson"]

    //RxJava2(RxAndroid) + retrofit2 + okhttp3
//    implementation "io.reactivex.rxjava2:rxjava:${lib_versions.rxJava}"
//    implementation "io.reactivex.rxjava2:rxandroid:${lib_versions.rxandroid}"
//    implementation "com.squareup.retrofit2:retrofit:${lib_versions.rtf2}"
//    implementation "com.squareup.retrofit2:converter-gson:${lib_versions.rtf2_2gson}"
//    implementation "com.squareup.retrofit2:adapter-rxjava2:${lib_versions.rtf2_adapter}"

    implementation rootProject.ext.dependencies["recyclerView"]
    implementation rootProject.ext.dependencies["cardView"]
    implementation rootProject.ext.dependencies["appcompat"]

    // Test library
    testImplementation rootProject.ext.test["junit"]
    androidTestImplementation rootProject.ext.test["test-runner"]
    androidTestImplementation rootProject.ext.test["test-rules"]
    androidTestImplementation rootProject.ext.test["support-test-espresso"]

    // WorkManager (Java only)
    implementation 'androidx.work:work-runtime:2.0.1'

    // ViewModel and LiveData
    implementation rootProject.ext.dependencies["lifecycle-extensions"]

//    implementation rootProject.ext.dependencies["kangaroo"]
    implementation rootProject.ext.dependencies["xul_cache"]
}

//
//android.applicationVariants.all{variant ->
//    println('pppppp:' + variant.flavorName)
//}

//gradle.taskGraph.whenReady {
//    graph ->  println('>>>>>> taskGraph is ready! Config finished.')
//}
//
//gradle.buildFinished {
//    result -> println('>>>>>> all buildFinished!.')
//}
//
///**
// * 表示所有的模块都已经配置完
// * 可以准备执行task
// */
project.afterEvaluate {
    logger.log(LogLevel.ERROR,'>>>>> Evaluate End')
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().toString())
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().getDependencies().toString())
    /** 遍历构建遍历 可以根据构建类型进行任务处理 */
    android.libraryVariants.each{ variant ->

    }
}
//
//logger.log(LogLevel.DEBUG, ">>>>>>>>>>> app config End")


