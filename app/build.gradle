apply {
    plugin 'com.android.application'
    from 'version.gradle'
    from 'compile.gradle'
}


def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object
def keystoreProperties = new Properties()
// Load keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        ZekeSigned {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    //The default configuration, inherited by all product flavors(if any are defined)
    defaultConfig {
        applicationId 'com.kingz.customdemo'
        multiDexEnabled false
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        //unit test
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        signingConfig signingConfigs.ZekeSigned
        minSdkVersion 19
        targetSdkVersion 22
        buildConfigField("String", "APP_NAME", "STARCOR")
    }

    // Specifies one flavor dimension.
    flavorDimensions "version"
    productFlavors{
        demo {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".demo"
            versionNameSuffix "-2019"
            versionCode appVersionCode
            versionName appVersionName
            buildConfigField("String", "APP_NAME", "\"STARCOR\"")
            buildConfigField 'String','MAIN_URL','"http://www.starcor.com"'
        }

        full {
            dimension "version"
            applicationIdSuffix ".full"
            versionNameSuffix "-2019"
            versionCode appVersionCode
            versionName appVersionName
            buildConfigField("String", "APP_NAME", "\"STARCOR\"")
            buildConfigField 'String','MAIN_URL','"http://www.starcor.com"'
        }
    }

    buildTypes {
        debug {
//            buildConfigField "boolean", "LOG_DEBUG", "false" //不显示log
            zipAlignEnabled true
//            minifyEnabled true
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        release {
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.ZekeSigned

            //自动清理掉未使用资源  打开后，会在构建的时候检查所有资源，
            // 看看哪些未被引用。包括第三方apk的。 (但好像有问题)
//            shrinkResources true
        }
    }

    configurations {
    }

    compileOptions {
        encoding compile_encoding
        sourceCompatibility compile_source_compatibility
        targetCompatibility compile_target_compatibility
    }

    adbOptions{
    }

//>=6.0 使用HttpClient
//    useLibrary 'org.apache.http.legacy'

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.code.gson:gson:2.0'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation 'com.squareup.okhttp:okhttp:2.4.0'
    implementation 'com.squareup.okio:okio:1.5.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:support-v4:25.3.1'
    implementation 'com.android.support:recyclerview-v7:25.3.1'
    implementation project(path: ':views-library')

    //-----------------Exo Player Start-------------------------
    implementation 'com.google.android.exoplayer:exoplayer:r2.4.2'
//    implementation 'com.google.android.exoplayer:exoplayer-core:r2.X.X'
//    implementation 'com.google.android.exoplayer:exoplayer-dash:2.X.X'
//    implementation 'com.google.android.exoplayer:exoplayer-hls:2.X.X'
//    implementation 'com.google.android.exoplayer:exoplayer-ui:2.X.X'


    //------------------- Local Unit  --------------------
    //Adds a implementation time dependency for local tests. Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.12'

    // Optional -- Mockito framework
//    testimplementation 'org.mockito:mockito-core:1.10.19'

    //------------------- Local Unit  --------------------
    //Andr`oid测试支持库  适用于 Android 且与 JUnit 4 兼容的测试运行器
    androidTestImplementation 'com.android.support.test:runner:0.4'
    androidTestImplementation 'com.android.support.test:rules:0.4'
    androidTestImplementation 'com.android.support:support-annotations:25.3.1'
}

gradle.taskGraph.whenReady {
    graph ->  println('>>>>>> taskGraph is ready! Config finished.')
}

gradle.buildFinished {
    result -> println('>>>>>> all buildFinished!.')
}

/**
 * 表示所有的模块都已经配置完
 * 可以准备执行task
 */
project.afterEvaluate {
    logger.log(LogLevel.ERROR,'>>>>> Evaluate End')
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().toString())
    logger.log(LogLevel.ERROR, assemble.getTaskDependencies().getDependencies().toString())
    /** 遍历构建遍历 可以根据构建类型进行任务处理 */
//    android.libraryVariants.each{ variant ->
//
//    }
}

logger.log(LogLevel.DEBUG, ">>>>>>>>>>> app config End")


