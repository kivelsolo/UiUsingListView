//使用Groovy语言编写的一个插件，用于构建Android主工程,使'android' block 中特殊指定的构建选项可用
//相当于eclipse中的ADT插件。
//如果这个模块是一个Library的话，应该引入的插件叫做'com.android.library'，

println '>>>>>>>>>>> app config Start'

apply plugin:'com.android.application'
//apply plugin:'com.kingz.firstplugin'
apply from:'version.gradle'
apply from:'compile.gradle'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def appName_360 = "\"GreekMyth_360\""
def appName_wdj = "\"GreekMyth_WDJ\""

android {
    signingConfigs {
        ZekeSigned {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 22
    buildToolsVersion '25.0.1'

    //The default configuration, inherited by all product flavors(if any are defined)
    defaultConfig {
        applicationId 'com.kingz.customdemo'
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        //unit test
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        signingConfig signingConfigs.ZekeSigned
        minSdkVersion 19
        targetSdkVersion 22
        buildConfigField("String", "APP_NAME", "${appName_360}")
        /** NDK配置 */
        /*ndk{
            abiFilters 'x86','x86_64','armeabi-v7a','armeabi','armea64-v8a'
        }
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
                // https://blog.csdn.net/renfujiang/article/details/54650355
                //https://www.jianshu.com/p/6332418b12b1
                // 配置之间用逗号分隔，每个配置需要使用单引号括起来，每个配置需要 “-” 开头，但是文档上并没有，末尾没有标点符号
                // ANDROID_TOOLCHAIN  指定编译的工具链，有两个 gcc 或者是clang, 默认:clang
                // DANDROID_PLATFORM  ndk版本号
                arguments '-DANDROID_ARM_NEON=TRUE',
                        '-DANDROID_TOOLCHAIN=clang',
                        '-DANDROID_STL=gnustl_static'
            }
        }*/
    }
    productFlavors {
       /* 在创建和配置productFlavors之后SyncNow
        Gradle 会根据buildTypes和productFlavors自动创建Build Variant,并按照 <product-flavor><Build-Type> 的格式命名这些变体。
        例如，如果创建了“demo”和“full”这两种productFlavors并保留默认的“debug”和“release”构建类型，
        Gradle 将创建以下构建变体：demo-debug/demo-release/full-debug/full-release
        可以将构建变体更改为要构建并运行的任何变体,只需转到 Build > Select Build Variant,然后从下拉菜单中选择一个变体
        然而,要开始自定义每个构建变体及其功能和资源,需要了解如何创建和管理源集。
        readMore:https://developer.android.com/studio/build/build-variants.html#product-flavors*/
        v_360 {
            applicationIdSuffix ".qihu"
            versionNameSuffix "-360"
            versionCode appVersionCode
            versionName appVersionName

            //自定义BuildConfig参数
            buildConfigField("String", "APP_NAME", "${appName_360}")
            buildConfigField 'String','MAIN_URL','"http://www.360.com"'
        }
    }

    //buildTypes 的配置在productFlavors的基础上增加
    buildTypes {
        debug {
            zipAlignEnabled true  //zipalign优化

        }
        release {
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.ZekeSigned

            //自动清理掉未使用资源  打开后，会在构建的时候检查所有资源，
            // 看看哪些未被引用。包括第三方apk的。 (但好像有问题)
//            shrinkResources true
        }

    }

    compileOptions {
        encoding compile_encoding
        sourceCompatibility compile_source_compatibility
        targetCompatibility compile_target_compatibility
    }

//    LintOptions{
//        //http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html
//    }
//    signingConfigs{
    //http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.SigningConfig.html
//    }

  /*  Hello JNI   http://tools.android.com/tech-docs/external-c-builds
      By CMake
    externalNativeBuild{
       cmake{
            path "src/main/cpp/CMakeLists.txt"
        }
    }*/

    adbOptions{

    }
}

dependencies {
    //debugCompile(["jp.wasabeef:takt:1.0.1"]) 屏蔽wasabeef用于显示Fps的第三方库  reason:应用中已经自己写好了
    //Local binary dependency
    compile fileTree(include: ['*.jar'], dir: 'libs')
    // Remote binary dependency
    //    compile 'com.android.support:support-v4:22.0.+'
    //    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okio:okio:1.5.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.tools.build:gradle:2.3.1'
    compile project(path: ':views-library')

    //compile 'org.testng:testng:6.9.6'


    //-----------------Exo Player Start-------------------------
    compile 'com.google.android.exoplayer:exoplayer:r2.4.2'
//    compile 'com.google.android.exoplayer:exoplayer-core:r2.X.X'
//    compile 'com.google.android.exoplayer:exoplayer-dash:2.X.X'
//    compile 'com.google.android.exoplayer:exoplayer-hls:2.X.X'
//    compile 'com.google.android.exoplayer:exoplayer-ui:2.X.X'

    //编译extras目录下的ShimmerAndroid模块
    //compile project(':extras:ShimmerAndroid')
    // Dependency on the "jarlibrary" module from this project
    //    compile project(':jarlibrary')
    //------------------- Local Unit  --------------------
    //Adds a compile time dependency for local tests. Required -- JUnit 4 framework
    testCompile 'junit:junit:4.12'
    // Optional -- Mockito framework
//    testCompile 'org.mockito:mockito-core:1.10.19'
    //------------------- Local Unit  --------------------
    //Andr`oid测试支持库  适用于 Android 且与 JUnit 4 兼容的测试运行器
    androidTestCompile 'com.android.support.test:runner:0.4'
    // Set this dependency to use JUnit 4 rules
    androidTestCompile 'com.android.support.test:rules:0.4'
    // Adds a compile time dependency for the test APK.
    //    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    // Set this dependency to build and run Espresso tests : UI 测试框架:适合应用中的功能性 UI 测试
    //    androidTestCompile ('com.android.support.test.espresso:espresso-core:2.2.2'){
    //        //如果项目中有用Dagger或者Dagger2的话,不加这行会编译失败的.
    //        exclude group: 'javax.inject'
    //        exclude module: 'support-annotations'
    //        exclude module: 'support-v4'
    //        exclude module: 'support-v13'
    //        exclude module: 'recyclerview-v7'
    //        exclude module: 'appcompat-v7'
    //    }
    // Set this dependency to build and run UI Automator tests : UI 测试框架；适合跨系统和已安装应用的跨应用功能性 UI 测试
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.0'
}

configurations.all {
    resolutionStrategy.force 'com.android.support:support-annotations:23.0.1'
}

gradle.taskGraph.whenReady {
    graph ->  println('>>>>>> taskGraph is ready! Config finished.')
}

gradle.buildFinished {
    result -> println('>>>>>> all buildFinished!.')
}

/**
 * 表示所有的模块都已经配置完
 * 可以准备执行task
 */
project.afterEvaluate {
    println "-----> app evaluate start"
    println "-----> app evaluate end"
}
println '>>>>>>>>>>> app config End'

