apply plugin: 'com.android.library'

android {
    compileSdkVersion 22
    buildToolsVersion "25.0.1"

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
//    compile 'com.android.support:appcompat-v7:22.0.1'
    testCompile 'junit:junit:4.12'
}

def SDK_BASENAME = "TestSdk";
def SDK_VERSION = "_V1.0";
def sdkDestinationPath = "build/outputs/jar/";
def jarUrl = sdkDestinationPath + SDK_BASENAME + SDK_VERSION + ".jar";
def code_From = "build/intermediates/classes/release/";

task deleteBuild(type: Delete) {
    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + ".jar"
}

task makeTestJar(dependsOn: ['compileReleaseJavaWithJavac'], type: Jar){
    delete  jarUrl
    from(code_From)
    exclude('**/R.class')
    exclude('**/R\$*.class')
    exclude('**/BuildConfig.class')
    include('com/test/jarlibrary/**/*.class')
    archiveName = SDK_BASENAME + SDK_VERSION + ".jar"
    destinationDir = file(sdkDestinationPath)
//    outjars jarUrl
//    configuration 'proguard-rules.pro'// 混淆配置文件
//    from(project.zipTree("**/***.jar")) //打第三方包
}
